* {
  box-sizing: border-box;
}

html {
  background-color: #fff;
  font-size: 16px;
  min-width: 300px;
  overflow-x: hidden;
  overflow-y: scroll;

  /* these are specific to different browsers */
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  -webkit-text-size-adjust: 100%;
  -moz-text-size-adjust: 100%;
  text-size-adjust: 100%;
}

body {
  margin: 0 1rem;
  padding: 1.5rem 1rem;
font-family: typewriter;
  font-weight: 600;
  line-height: 2.5;
  background-color: rgb(139 131 243);
  color: rgb(74, 74, 74);
}


a {
  display: inline-block;
  text-decoration: none;
}

h2 {
  font-family: typewriter;
  margin:0;
  padding:0;
  padding-bottom:1.5rem;
   text-align: center 
}

form {
  accent-color: hsla(120, 100%, 50%, 0.482);
}

/*
  - These styles use 'class names'
  - You can apply them by using the 'class' attribute on your HTML
  - like this: <div class="wrapper">
  - note that the period vanishes there!
*/


.wrapper {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  margin: 0;
  flex: 1;
}

.container {
  margin: 0 20px;
  display: list-item;
  justify-content: space-evenly;
  align-items: start;
  flex:1;
}


/*
  This rule implies that the H1 tag lives within another HTML tag
  It "inherits" some rules from the above
  Those rules won't apply to an h1 that's outside a block with the class of 'header'
*/

.header h1 {
  display: block;
  /* this will push other blocks out of the way */

  /* colors */
  color: #ffffffe6;


  /* shapes */
font-family: typewriter;
 font-style: normal;
  font-weight: bold;
  font-size: 100px;
  line-height: 105%;
  margin: 0;
  /* box-shadows are fancy */
  box-shadow: 0 0.5em 1em -0.125em rgb(10 10 10 / 10%), 0 0 0 1px rgb(10 10 10 / 2%);
}

@font-face {
  font-family: typewriter;
src: url("https://cdn.glitch.global/8345a108-560c-4473-bfa2-85363daa07d4/webfontkit-20230210-125011.zip?v=1676051716798") format("woff")
}

div {
  font-family: typewriter;
}
/*
  Rules can be combined on a block to apply the 'cascade' in order
  So you can use two classnames in a single class attribute
  like: <div class="box section">

  Rules may combine in unexpected ways - remember that the LAST thing written in this file will have "priority"
  And will be what displays in your client
*/
#map {
  display: none;
  width: 400px;
  height: 380px;
  border: 2px dashed rgb(99, 99, 99);
  margin-bottom: 1rem;
}


.box {
  border: 2px dashed;
  border-radius: 4px;

  width: fit-content;
  height:fit-content;
  padding: 1.5rem;
  margin: 0 auto;
}

.left_section {
  flex: 0 1 auto;
  margin: 1rem;
  padding: 1.5rem;
}

.right_section {
  display: flex;
  flex-direction: column;
  flex: 1 2 auto;
  margin: 1rem;
  align-items: center;
  justify-content: center;
}

/* 
  Set some rules for smaller screens
*/

@media only screen and (max-width: 736px){
    .container {
      flex-direction: column;
    }
    .left_section {
      flex: 1 1 auto;
    }
    .right_section {
      flex: 1 1 auto;
      justify-content: flex-start;
    }
    .box {
      width: 100%;
      width: -moz-available;          /* WebKit-based browsers will ignore this. */
      width: -webkit-fill-available;  /* Mozilla-based browsers will ignore this. */
      width: fill-available;
      align-items: flex-start;
    }
}

/*
  This block is actually dependent on the "container" block having a flex set on it
  and the "wrapper" block displaying as a flex column with a "vertical height" (vh) of 100.
  That serves to cram the footer to the bottom of the page.
*/

.footer {
  border: 2px dashed;
  border-radius: 4px;

  flex-shrink: 0;
  padding: 1rem;

  font-size: 1.2rem;
  font-weight: 600;
}

.footer a {
  text-decoration: underline;
}

/*
  This is an example of a 'pseudoclass'
  In this instance, it says what to do if a mouse hovers over a link
  This is pretty desktop-specific, since there's no hover function on touchscreens
*/
.footer a:hover {
  /* Hue, saturation, luminosity, alpha */
  background-color: hsla(0, 0%, 90%, 0.15);
  /* red, green, blue, alpha */
  text-decoration: none;
}

.subtitle {
  color: rgba(0, 0, 0, 0.8);
  margin: 0px;
  margin-bottom: 5px;
}

/*
Form Styles
*/
  form input {
    /* This is a hack to make sure our boxes line up with one another nicely */
    width: 100%;
    width: -moz-available;          /* WebKit-based browsers will ignore this. */
    width: -webkit-fill-available;  /* Mozilla-based browsers will ignore this. */
    width: fill-available;

    /* here we are setting white space correctly */
    margin-bottom: 1rem;
    height: 2rem;
    border-radius: 4px;
  }

  form label {
    width: 100%;
    width: -moz-available;          /* WebKit-based browsers will ignore this. */
    width: -webkit-fill-available;  /* Mozilla-based browsers will ignore this. */
    width: fill-available;
    align-items: flex-start;

    display: block; /* this turns the label text into a box we can set margins on */
    margin-bottom: 0.5rem;
  }



/* Deploy this with images as direct "children" and the images should pop into shape */
.grid {
  display: flex;
  justify-content: space-evenly;
  flex-flow: wrap;
  width: 350px;
  height: 350px;
  margin: 0 auto;
}

.grid img {
  width: 150px;
  height: 150px;
}


/* Carousel */
div.carousel {
  max-width: 500px;
  overflow: hidden;
  text-align: center;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  margin: 0 auto;
  margin-bottom: 1rem;
}

.carousel .slides {
  height: 500px;
/*   margin: 15px; */
  display: flex;
  overflow-x: auto;
  scroll-snap-type: x mandatory;
  scroll-behavior: smooth;

}

/* .carousel_item, */
.hidden {
  display: none;
}

.visible {
  display: block;
}

.carousel_item img {
  /* 
    Setting width, rather than max-width or min-width,
    means annoying pop-ins won't happen
    but it also means you need to format your images to be compatible
    or they will stretch weird

    try a tall one and see what happens
   */
  width: 250px; 
}

.prev,
.next {
  border: none;
  margin: 2px;
  text-align: center;
  border-radius: 5px;
  font-weight: bold;
  height: 45px;
  padding: 10px;
  line-height: 0; /* This centers a button's text! */
  border: 2px solid rgb(99,99,99); /* shorthand for how to do a border */
}

.prev:focus,
.next:focus {
  margin: 0;
  border: 2px solid rgba(0, 139, 139, 0.8);
}

.prev:hover,
.next:hover {
  background-color: rgba(243, 142, 53, 0.815);
}

.buttons {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
}

.red {
  color: red;
  background: red;
}

.main_image {
  width: 50px;
}

.avatar {
  vertical-align: middle;
  width: 70px;
  height: 70px;
  border-radius: 70%;
}

HTML CSS Result Skip Results Iframe
.box {
  width: 150px;
  height: 150px;
  background: red;
  margin-top: 20px;
  margin-left: auto;
  margin-right: auto;
  -webkit-transition: background-color 2s ease-out;
  -moz-transition: background-color 2s ease-out;
  -o-transition: background-color 2s ease-out;
  transition: background-color 2s ease-out;
}

.box:hover {
  background-color: green;
  cursor: pointer;
}

p
{
  text-align: center 
}
/*
AQUÍ EMPIEZA EL CSS DEL botón y cambio de color */
button {
  top: 50%;
  left: 50%;
  padding: 5px;
  background: #DE3163;
  border: none;
  outline: none;
  font-size: 18px;
  font-family: georgia;
  text-transform: uppercase;
  cursor: pointer;
 
}
/*
AQUÍ TERMIINA EL CSS DEL boton
*/